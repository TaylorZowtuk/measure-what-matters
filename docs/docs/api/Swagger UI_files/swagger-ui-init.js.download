
window.onload = function() {
  // Build a system
  var url = window.location.search.match(/url=([^&]+)/);
  if (url && url.length > 1) {
    url = decodeURIComponent(url[1]);
  } else {
    url = window.location.origin;
  }
  var options = {
  "swaggerDoc": {
    "openapi": "3.0.0",
    "info": {
      "title": "MWM Api",
      "description": "The MWM API description",
      "version": "1.0",
      "contact": {}
    },
    "tags": [],
    "servers": [],
    "components": {
      "securitySchemes": {
        "bearer": {
          "scheme": "bearer",
          "bearerFormat": "JWT",
          "type": "http"
        }
      },
      "schemas": {
        "GoalDTO": {
          "type": "object",
          "properties": {
            "matchId": {
              "type": "number"
            },
            "time": {
              "type": "number",
              "format": "int",
              "description": "The time the goal was scored in milliseconds"
            },
            "playerId": {
              "type": "number"
            },
            "lineup": {
              "example": [
                1,
                2,
                3,
                4,
                5,
                6
              ],
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          "required": [
            "matchId",
            "time",
            "playerId",
            "lineup"
          ]
        },
        "SubstitutionExchangeDTO": {
          "type": "object",
          "properties": {
            "playerIdIn": {
              "type": "number",
              "description": "The player coming onto the field"
            },
            "playerIdOut": {
              "type": "number",
              "description": "The player leaving the field"
            },
            "matchId": {
              "type": "number"
            },
            "time": {
              "type": "number",
              "format": "int",
              "description": "The time that the player was subbed out in milliseconds"
            }
          },
          "required": [
            "playerIdIn",
            "playerIdOut",
            "matchId",
            "time"
          ]
        },
        "SubstitutionDTO": {
          "type": "object",
          "properties": {
            "playerId": {
              "type": "number"
            },
            "matchId": {
              "type": "number"
            },
            "timeOn": {
              "type": "number",
              "format": "int",
              "description": "The time the player came onto the field in milliseconds"
            },
            "timeOff": {
              "type": "number",
              "format": "int",
              "description": "The time the player came off the field in milliseconds"
            }
          },
          "required": [
            "playerId",
            "matchId",
            "timeOn",
            "timeOff"
          ]
        },
        "CreateAssistDTO": {
          "type": "object",
          "properties": {
            "matchId": {
              "type": "number"
            },
            "time": {
              "type": "number"
            },
            "playerId": {
              "type": "number"
            }
          },
          "required": [
            "matchId",
            "time",
            "playerId"
          ]
        },
        "AssistDTO": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number"
            },
            "matchId": {
              "type": "number"
            },
            "time": {
              "type": "number"
            },
            "playerId": {
              "type": "number"
            }
          },
          "required": [
            "id",
            "matchId",
            "time",
            "playerId"
          ]
        },
        "NeutralPossessionDTO": {
          "type": "object",
          "properties": {
            "matchId": {
              "type": "number"
            },
            "time": {
              "type": "number"
            }
          },
          "required": [
            "matchId",
            "time"
          ]
        },
        "PlayerPossessionDTO": {
          "type": "object",
          "properties": {
            "matchId": {
              "type": "number"
            },
            "time": {
              "type": "number"
            },
            "playerId": {
              "type": "number"
            }
          },
          "required": [
            "matchId",
            "time",
            "playerId"
          ]
        },
        "OppositionPossessionDTO": {
          "type": "object",
          "properties": {
            "matchId": {
              "type": "number"
            },
            "time": {
              "type": "number"
            }
          },
          "required": [
            "matchId",
            "time"
          ]
        },
        "RemovePossessionDTO": {
          "type": "object",
          "properties": {
            "possessionEventId": {
              "type": "number"
            }
          },
          "required": [
            "possessionEventId"
          ]
        },
        "CreateShotDTO": {
          "type": "object",
          "properties": {
            "matchId": {
              "type": "number"
            },
            "time": {
              "type": "number"
            },
            "playerId": {
              "type": "number"
            },
            "onTarget": {
              "type": "boolean"
            }
          },
          "required": [
            "matchId",
            "time",
            "playerId",
            "onTarget"
          ]
        },
        "ShotDTO": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number"
            },
            "matchId": {
              "type": "number"
            },
            "time": {
              "type": "number"
            },
            "playerId": {
              "type": "number"
            },
            "onTarget": {
              "type": "boolean"
            }
          },
          "required": [
            "id",
            "matchId",
            "time",
            "playerId",
            "onTarget"
          ]
        },
        "CreateMatchDTO": {
          "type": "object",
          "properties": {
            "teamId": {
              "type": "number"
            },
            "scheduledTime": {
              "type": "number",
              "format": "int",
              "description": "The epoch time that the game is scheduled to begin."
            },
            "opponentTeamName": {
              "type": "string"
            },
            "isHomeTeam": {
              "type": "boolean"
            }
          },
          "required": [
            "teamId",
            "scheduledTime",
            "opponentTeamName",
            "isHomeTeam"
          ]
        },
        "StartMatchDTO": {
          "type": "object",
          "properties": {
            "matchId": {
              "type": "number"
            },
            "time": {
              "type": "number",
              "description": "The epoch timestamp the game recording session began."
            }
          },
          "required": [
            "matchId",
            "time"
          ]
        },
        "Team": {
          "type": "object",
          "properties": {}
        },
        "MatchDTO": {
          "type": "object",
          "properties": {
            "matchId": {
              "type": "number"
            },
            "team": {
              "$ref": "#/components/schemas/Team"
            },
            "teamId": {
              "type": "number"
            },
            "scheduledTime": {
              "type": "number",
              "format": "int",
              "description": "The epoch time that the game is scheduled to begin."
            },
            "startTime": {
              "type": "number",
              "format": "int",
              "description": "The epoch time that the recording session began."
            },
            "halfTime": {
              "type": "number",
              "format": "int",
              "description": "The game time that halftime occurred."
            },
            "fullTime": {
              "type": "number",
              "format": "int",
              "description": "The game time in milliseconds that the game concluded."
            },
            "opponentTeamName": {
              "type": "string"
            },
            "isHomeTeam": {
              "type": "boolean"
            },
            "createdDate": {
              "format": "date-time",
              "type": "string"
            },
            "updatedDate": {
              "format": "date-time",
              "type": "string"
            }
          },
          "required": [
            "matchId",
            "team",
            "teamId",
            "scheduledTime",
            "startTime",
            "halfTime",
            "fullTime",
            "opponentTeamName",
            "isHomeTeam",
            "createdDate",
            "updatedDate"
          ]
        },
        "HalfTimeDTO": {
          "type": "object",
          "properties": {
            "matchId": {
              "type": "number"
            },
            "time": {
              "type": "number",
              "description": "The game time in milliseconds that halftime began"
            }
          },
          "required": [
            "matchId",
            "time"
          ]
        },
        "FullTimeDTO": {
          "type": "object",
          "properties": {
            "matchId": {
              "type": "number"
            },
            "time": {
              "type": "number",
              "description": "The game time in milliseconds that the game concluded."
            }
          },
          "required": [
            "matchId",
            "time"
          ]
        },
        "CreatePlayerDTO": {
          "type": "object",
          "properties": {
            "teamId": {
              "type": "number"
            },
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "jerseyNum": {
              "type": "number"
            }
          },
          "required": [
            "teamId",
            "firstName",
            "lastName",
            "jerseyNum"
          ]
        },
        "PlayerDTO": {
          "type": "object",
          "properties": {
            "playerId": {
              "type": "number"
            },
            "teamId": {
              "type": "number"
            },
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "jerseyNum": {
              "type": "number"
            }
          },
          "required": [
            "playerId",
            "teamId",
            "firstName",
            "lastName",
            "jerseyNum"
          ]
        },
        "UpdatePlayerDTO": {
          "type": "object",
          "properties": {
            "playerId": {
              "type": "number"
            },
            "teamId": {
              "type": "number"
            },
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "jerseyNum": {
              "type": "number"
            }
          },
          "required": [
            "playerId",
            "teamId",
            "firstName",
            "lastName",
            "jerseyNum"
          ]
        },
        "PlayerTimeDTO": {
          "type": "object",
          "properties": {
            "playerId": {
              "type": "number"
            },
            "teamId": {
              "type": "number"
            },
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "jerseyNum": {
              "type": "number"
            },
            "millisecondsPlayed": {
              "type": "number"
            }
          },
          "required": [
            "playerId",
            "teamId",
            "firstName",
            "lastName",
            "jerseyNum",
            "millisecondsPlayed"
          ]
        },
        "PlusMinusDTO": {
          "type": "object",
          "properties": {
            "player": {
              "$ref": "#/components/schemas/PlayerDTO"
            },
            "plusMinus": {
              "type": "number"
            }
          },
          "required": [
            "player",
            "plusMinus"
          ]
        },
        "ReturnTouchesDTO": {
          "type": "object",
          "properties": {
            "firstHalfTouches": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "secondHalfTouches": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "fullGameTouches": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "firstHalfTouches",
            "secondHalfTouches",
            "fullGameTouches"
          ]
        },
        "PlayerPossessionsReturnDTO": {
          "type": "object",
          "properties": {
            "firstHalfPossessionsPlayer": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "secondHalfPossessionsPlayer": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "fullGamePossessionsPlayer": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "firstHalfPossessionsPlayer",
            "secondHalfPossessionsPlayer",
            "fullGamePossessionsPlayer"
          ]
        },
        "TeamPossessionSummaryDTO": {
          "type": "object",
          "properties": {
            "firstHalfPossOurTeam": {
              "type": "number"
            },
            "secondHalfPossOurTeam": {
              "type": "number"
            },
            "fullGamePossOurTeam": {
              "type": "number"
            }
          },
          "required": [
            "firstHalfPossOurTeam",
            "secondHalfPossOurTeam",
            "fullGamePossOurTeam"
          ]
        },
        "CreateTeamDTO": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        },
        "TeamDTO": {
          "type": "object",
          "properties": {
            "teamId": {
              "type": "number"
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "teamId",
            "name"
          ]
        },
        "LoginDTO": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string"
            },
            "password": {
              "type": "string"
            }
          },
          "required": [
            "username",
            "password"
          ]
        },
        "EditUserDTO": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        },
        "CreateUserDTO": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "username": {
              "type": "string"
            },
            "password1": {
              "type": "string"
            },
            "password2": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "username",
            "password1",
            "password2"
          ]
        },
        "CreateLineupDTO": {
          "type": "object",
          "properties": {
            "lineup": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "matchId": {
              "type": "number"
            }
          },
          "required": [
            "lineup",
            "matchId"
          ]
        },
        "LineupDTO": {
          "type": "object",
          "properties": {
            "lineupId": {
              "type": "number"
            },
            "lineup": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "matchId": {
              "type": "number"
            }
          },
          "required": [
            "lineupId",
            "lineup",
            "matchId"
          ]
        }
      }
    },
    "paths": {
      "/event/goals": {
        "post": {
          "operationId": "GoalController_saveGoalEvent",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoalDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Creates a new goal event"
            },
            "400": {
              "description": "The request body contains an invalid field"
            },
            "500": {
              "description": "Something went wrong"
            }
          },
          "tags": [
            "Goals"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "get": {
          "operationId": "GoalController_getGoals",
          "parameters": [
            {
              "name": "playerId",
              "required": false,
              "in": "query",
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "matchId",
              "required": false,
              "in": "query",
              "schema": {
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns array of goals for the specified player",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GoalDTO"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "The request has a missing or invalid query param"
            }
          },
          "tags": [
            "Goals"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/event/substitutions": {
        "post": {
          "operationId": "SubstitutionController_saveSubstitutionEvent",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubstitutionExchangeDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Creates a substitution event"
            },
            "400": {
              "description": "The request body contains an invalid field"
            },
            "500": {
              "description": "Something went wrong"
            }
          },
          "tags": [
            "Substitutions"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/event/substitutions/startingLineup": {
        "post": {
          "operationId": "SubstitutionController_createStartingSubs",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubstitutionDTO"
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Creates the starting lineup substitutions"
            },
            "400": {
              "description": "The request body contains an invalid field"
            },
            "500": {
              "description": "Something went wrong"
            }
          },
          "tags": [
            "Substitutions"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/event/assists": {
        "post": {
          "operationId": "AssistController_saveAssistEvent",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAssistDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Creates a new assist event"
            },
            "400": {
              "description": "Violates foreign key, or null value entered"
            },
            "500": {
              "description": "Unknown error occurred"
            }
          },
          "tags": [
            "Assists"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "get": {
          "operationId": "AssistController_getAssistsPlayerOrMatch",
          "parameters": [
            {
              "name": "playerId",
              "required": false,
              "in": "query",
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "matchId",
              "required": false,
              "in": "query",
              "schema": {
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns array of assists for the specified player and/or match",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AssistDTO"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Both playerId and matchId null"
            },
            "500": {
              "description": "Unknown error occurred"
            }
          },
          "tags": [
            "Assists"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/event/assists/delete": {
        "delete": {
          "operationId": "AssistController_deleteAssist",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "schema": {
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Assist event removed successfully"
            },
            "400": {
              "description": "Not a number, number expected"
            },
            "404": {
              "description": "Assist event does not exist in database"
            },
            "500": {
              "description": "Unknown error occured"
            }
          },
          "tags": [
            "Assists"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/event/possession/neutral": {
        "post": {
          "operationId": "PossessionController_neutralPossession",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NeutralPossessionDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Creates a neutral possession event."
            },
            "400": {
              "description": "MatchId does not exist, or a null value was used."
            },
            "401": {
              "description": "User is not authenticated."
            },
            "500": {
              "description": "Unknown error occurred."
            }
          },
          "tags": [
            "Possessions"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/event/possession/player": {
        "post": {
          "operationId": "PossessionController_playerPossession",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerPossessionDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Creates a player possession event."
            },
            "400": {
              "description": "MatchId or PlayerId does not exist, or a null value was used."
            },
            "401": {
              "description": "User is not authenticated."
            },
            "500": {
              "description": "Unknown error occurred."
            }
          },
          "tags": [
            "Possessions"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/event/possession/opposition": {
        "post": {
          "operationId": "PossessionController_oppositionPossession",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OppositionPossessionDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Creates a opposition possession event."
            },
            "400": {
              "description": "MatchId does not exist, or a null value was used."
            },
            "401": {
              "description": "User is not authenticated."
            },
            "500": {
              "description": "Unknown error occurred."
            }
          },
          "tags": [
            "Possessions"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/event/possession": {
        "delete": {
          "operationId": "PossessionController_removePossessionEvent",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemovePossessionDTO"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Possession event removed successfully."
            },
            "400": {
              "description": "Possession event with given Id was not found or was null"
            },
            "401": {
              "description": "User is not authenticated."
            },
            "500": {
              "description": "Unknown error occurred."
            }
          },
          "tags": [
            "Possessions"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/event/shots": {
        "post": {
          "operationId": "ShotController_saveShotEvent",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateShotDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Creates a new shot event"
            },
            "400": {
              "description": "Invalid parameter entered in DTO"
            }
          },
          "tags": [
            "Shots"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "get": {
          "operationId": "ShotController_getShotsByMatch",
          "parameters": [
            {
              "name": "matchId",
              "required": true,
              "in": "query",
              "schema": {
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns all shot events for a given match",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ShotDTO"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "MatchId has to be an integer"
            },
            "500": {
              "description": "Unknown error occurred"
            }
          },
          "tags": [
            "Shots"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/event/shots/teamSummary": {
        "get": {
          "operationId": "ShotController_getTeamShotsSummaryByMatch",
          "parameters": [
            {
              "name": "matchId",
              "required": true,
              "in": "query",
              "schema": {
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns team summaries for shots"
            },
            "400": {
              "description": "Invalid parameter entered in DTO"
            },
            "500": {
              "description": "Unknown error occured"
            }
          },
          "tags": [
            "Shots"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/match/create": {
        "post": {
          "operationId": "MatchController_createMatch",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMatchDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Creates a new match"
            },
            "500": {
              "description": "Unknown error occurred"
            }
          },
          "tags": [
            "Matches"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/match/start": {
        "post": {
          "operationId": "MatchController_startMatch",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartMatchDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Starts a match recording session"
            },
            "500": {
              "description": "Unknown error occurred"
            }
          },
          "tags": [
            "Matches"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/match/teamId": {
        "get": {
          "operationId": "MatchController_getMatchesByTeamId",
          "parameters": [
            {
              "name": "teamId",
              "required": true,
              "in": "query",
              "schema": {
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of matches for the given teamId",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MatchDTO"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unknown error occurred"
            }
          },
          "tags": [
            "Matches"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/match/halftime": {
        "post": {
          "operationId": "MatchController_updateHalfTimeMatch",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HalfTimeDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Adds halftime to match entity"
            },
            "400": {
              "description": "MatchId or time is not valid"
            },
            "500": {
              "description": "Unknown error occurred"
            }
          },
          "tags": [
            "Matches"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/match/fullTime": {
        "post": {
          "operationId": "MatchController_updateFullTimeMatch",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullTimeDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Adds fulltime to match entity"
            },
            "400": {
              "description": "Fulltime cannot be smaller than halftime, or MatchId is not valid"
            },
            "500": {
              "description": "Unknown error occurred"
            }
          },
          "tags": [
            "Matches"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/players": {
        "post": {
          "operationId": "PlayerController_createPlayers",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreatePlayerDTO"
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Creates a new player"
            },
            "400": {
              "description": "TeamId not in database or null value entered for parameter"
            },
            "500": {
              "description": "Unknown error occured"
            }
          },
          "tags": [
            "Players"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "delete": {
          "operationId": "PlayerController_removePlayerEntity",
          "parameters": [
            {
              "name": "playerId",
              "required": true,
              "in": "query",
              "schema": {
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Player removed from database."
            },
            "400": {
              "description": "Player with given Id was not found or was null"
            }
          },
          "tags": [
            "Players"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/players/teamId": {
        "get": {
          "operationId": "PlayerController_getPlayersByTeamId",
          "parameters": [
            {
              "name": "teamId",
              "required": true,
              "in": "query",
              "schema": {
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns array of players for the given team Id",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PlayerDTO"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid integer entered"
            },
            "500": {
              "description": "Unknown error occured"
            }
          },
          "tags": [
            "Players"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/players/edit": {
        "post": {
          "operationId": "PlayerController_updatePlayer",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePlayerDTO"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Update player entity"
            },
            "400": {
              "description": "Problems with request input"
            },
            "404": {
              "description": "Player does not exist in database"
            }
          },
          "tags": [
            "Players"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/player-stats/timeOnField": {
        "get": {
          "operationId": "PlayerStatsController_getTimeOnField",
          "parameters": [
            {
              "name": "matchId",
              "required": true,
              "in": "query",
              "schema": {
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns an array of time on field for all players in a specific match",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PlayerTimeDTO"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "MatchId not in database"
            },
            "500": {
              "description": "Unknown error occured"
            }
          },
          "tags": [
            "Player Stats"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/player-stats/onForGoal": {
        "get": {
          "operationId": "PlayerStatsController_getPlayersOnForGoal",
          "parameters": [
            {
              "name": "goalId",
              "required": true,
              "in": "query",
              "schema": {
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns an array of players that were on for a given goal",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PlayerDTO"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid integer entered for goalId or matchId does not exist"
            },
            "500": {
              "description": "Unknown error occured"
            }
          },
          "tags": [
            "Player Stats"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/player-stats/plus-minus": {
        "get": {
          "operationId": "PlayerStatsController_getPlusMinusMatch",
          "parameters": [
            {
              "name": "matchId",
              "required": true,
              "in": "query",
              "schema": {
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns an array of all players and their plus minus for a given match",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PlusMinusDTO"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "No lineup in database for this given match"
            },
            "500": {
              "description": "Unknown error occurred"
            }
          },
          "tags": [
            "Player Stats"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/player-stats/touches": {
        "get": {
          "operationId": "PlayerStatsController_getPlayerTouchesForMatch",
          "parameters": [
            {
              "name": "matchId",
              "required": true,
              "in": "query",
              "schema": {
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns an array of all players and their touches for a given match",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ReturnTouchesDTO"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "No lineup in database for this given match"
            },
            "500": {
              "description": "Unknown error occurred"
            }
          },
          "tags": [
            "Player Stats"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/player-stats/player-possession": {
        "get": {
          "operationId": "PlayerStatsController_getPlayerPossessionsForMatch",
          "parameters": [
            {
              "name": "matchId",
              "required": true,
              "in": "query",
              "schema": {
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns an array of all players and their total possession time for a match",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PlayerPossessionsReturnDTO"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "No lineup in database for this given match"
            },
            "500": {
              "description": "Unknown error occurred"
            }
          },
          "tags": [
            "Player Stats"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/player-stats/team-possession": {
        "get": {
          "operationId": "PlayerStatsController_getTeamPossessionSummary",
          "parameters": [
            {
              "name": "matchId",
              "required": true,
              "in": "query",
              "schema": {
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns an array of all players and their total possession time for a match",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TeamPossessionSummaryDTO"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "No lineup in database for this given match"
            },
            "500": {
              "description": "Unknown error occurred"
            }
          },
          "tags": [
            "Player Stats"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/teams": {
        "post": {
          "operationId": "TeamController_createTeam",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTeamDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Returns the team that was created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TeamDTO"
                  }
                }
              }
            },
            "400": {
              "description": "Request contains invalid data or team name is already taken."
            },
            "500": {
              "description": "Something went wrong."
            }
          },
          "tags": [
            "Teams"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "get": {
          "operationId": "TeamController_getTeamsByUserId",
          "parameters": [
            {
              "name": "userId",
              "required": true,
              "in": "header",
              "schema": {
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Gets all teams for the user",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TeamDTO"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Teams"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/teams/edit": {
        "post": {
          "operationId": "TeamController_upDateTeamName",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDTO"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Update team name"
            },
            "400": {
              "description": "Problems with request input"
            },
            "404": {
              "description": "Team does not exist in database"
            }
          },
          "tags": [
            "Teams"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/auth/login": {
        "post": {
          "operationId": "AuthController_login",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": ""
            }
          },
          "tags": [
            "Authentication"
          ],
          "security": [
            {
              "basic": []
            }
          ]
        }
      },
      "/users/profile": {
        "get": {
          "operationId": "UsersController_getUserDetails",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Gets user data for currently authenticated user."
            },
            "400": {
              "description": "User data not found."
            },
            "401": {
              "description": "User is not authenticated."
            },
            "500": {
              "description": "Unknown exception ocurred."
            }
          },
          "tags": [
            "Users"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/users/profile/edit": {
        "post": {
          "operationId": "UsersController_editUser",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditUserDTO"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User details updated successfully"
            },
            "500": {
              "description": "Unknown exception ocurred."
            }
          },
          "tags": [
            "Users"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/users/create": {
        "post": {
          "operationId": "UsersController_createUser",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Creates a new user account."
            },
            "400": {
              "description": "Passwords must be identical."
            },
            "401": {
              "description": "Cannot create a user if you are logged in."
            },
            "409": {
              "description": "Username is taken."
            },
            "500": {
              "description": "Unknown exception ocurred."
            }
          },
          "tags": [
            "Users"
          ]
        }
      },
      "/lineups": {
        "post": {
          "operationId": "LineupController_createLineup",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLineupDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Creates a new lineup"
            },
            "400": {
              "description": "Violates foreign key, or null value entered"
            },
            "500": {
              "description": "Unknown error occured"
            }
          },
          "tags": [
            "Lineups"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "get": {
          "operationId": "LineupController_getLineupByMatch",
          "parameters": [
            {
              "name": "matchId",
              "required": true,
              "in": "query",
              "schema": {
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns lineup for given matchId",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LineupDTO"
                  }
                }
              }
            },
            "400": {
              "description": "matchId does not have assosciated lineup"
            },
            "500": {
              "description": "Unknown error occured"
            }
          },
          "tags": [
            "Lineups"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      }
    }
  },
  "customOptions": {},
  "swaggerUrl": {}
};
  url = options.swaggerUrl || url
  var urls = options.swaggerUrls
  var customOptions = options.customOptions
  var spec1 = options.swaggerDoc
  var swaggerOptions = {
    spec: spec1,
    url: url,
    urls: urls,
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: "StandaloneLayout"
  }
  for (var attrname in customOptions) {
    swaggerOptions[attrname] = customOptions[attrname];
  }
  var ui = SwaggerUIBundle(swaggerOptions)

  if (customOptions.oauth) {
    ui.initOAuth(customOptions.oauth)
  }

  if (customOptions.authAction) {
    ui.authActions.authorize(customOptions.authAction)
  }

  window.ui = ui
}
